<template>
  <view class="content">
    <uni-navbar-lite :title="title" :is-left="isLeft" :text-color="navigationBarTextColor"></uni-navbar-lite>
    <scroll-view class="scroll-view" scroll-y="true">
      <view class="content-item" @click="onClick">
        <text>点击此处，将标题切换为{{isLeft?'居中':'左侧'}}显示</text>
      </view>

      <view class="content-item" @tap="setNavigationBarColor1">
        <text>设置自定义导航栏前景色白色</text>
      </view>

      <view class="content-item" @tap="setNavigationBarColor2">
        <text>设置自定义导航栏前景色黑色</text>
      </view>

      <view class="content-item" v-for="item in 20">
        <view class="cell-item">
          <text class="text">内容：{{item}}</text>
          <input class="text" style="margin-top: 8px;" placeholder="备注:"/>
        </view>
      </view>
      <!-- <input/> -->
    </scroll-view>
  </view>
</template>

<script>
  import { state, setLifeCycleNum } from '@/store/index.uts'
  export default {
    data() {
      return {
        title: 'Hello uni-app',
        isLeft: false,
        navigationBarTextColor: '#000'

      }
    },
    methods: {
      onClick(){
        this.isLeft = !this.isLeft
      },
      setNavigationBarColor1() {
        uni.setNavigationBarColor({
          frontColor: '#ffffff',
          backgroundColor: '#0000',
          success: () => {
            this.navigationBarTextColor = '#fff'
            console.log('setNavigationBarColor success')
            this.setLifeCycleNum(state.lifeCycleNum + 1)
          },
          fail: () => {
            console.log('setNavigationBarColor fail')
            this.setLifeCycleNum(state.lifeCycleNum - 1)
          },
          complete: () => {
            console.log('setNavigationBarColor complete')
            this.setLifeCycleNum(state.lifeCycleNum + 1)
          }
        })
      },
      setNavigationBarColor2() {
        uni.setNavigationBarColor({
          frontColor: '#000000',
          backgroundColor: '#0000',
          success: () => {
            this.navigationBarTextColor = '#000'
            console.log('setNavigationBarColor success')
            this.setLifeCycleNum(state.lifeCycleNum + 1)
          },
          fail: () => {
            console.log('setNavigationBarColor fail')
            this.setLifeCycleNum(state.lifeCycleNum - 1)
          },
          complete: () => {
            console.log('setNavigationBarColor complete')
            this.setLifeCycleNum(state.lifeCycleNum + 1)
          }
        })
      },
      // 自动化测试
      getLifeCycleNum(): number {
        return state.lifeCycleNum
      },
      // 自动化测试
      setLifeCycleNum(num: number) {
        setLifeCycleNum(num)
      },
    }
  }
</script>

<style>
  .content {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .scroll-view {
    flex: 1;
    background-color: #f5f5f5;
    padding: 5px 0;
  }

  .content-item {
    padding: 15px;
    margin: 5px 10px;
    background-color: #fff;
    border-radius: 5px;
  }

  .cell-item {
    display: flex;
    flex-direction: column;
  }

  .text {
    font-size: 14px;
    color: #666;
  }
</style>
